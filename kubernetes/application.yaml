apiVersion: v1   # references to Payment Service, that is located in another namespace
kind: Service
metadata:
  name: payment-service
  namespace: store-namespace 
spec:
  type: ExternalName 
  externalName: payment-service.payment-namespace.svc.cluster.local 
  ports:
    - name: http 
      port: 8090 
      targetPort: 8090
    
    - name: http 
      port: 50000 # Port of the Grpc Server Running in Payment Service in another Namespace
      targetPort: 50000 

--- 

apiVersion: v1  # references to Email Service, that is located in another namespace.
kind: Service 
metadata:
  name: email-service 
  namespace: store-namespace
spec:
  type: ExternalName 
  externalName: email-service.email-namespace.svc.cluster.local 
  ports:
    - name: http 
      port: 8080 
      targetPort: 8080

    - name: http 
      targetPort: 50000  # port of the Grpc Server Running In Email Service in another namespace.
      port: 50000  # port of the Grpc Server Running In Email Service.

--- 

apiVersion: v1 # Service for accessing store application (this) from Ingress...
kind: Service 
metadata:
  name: store-service 
  namespace: store-namespace 
spec:
  type: ClusterIP 
  ports:
    - name: http 
      port: 8000
      targetPort: 8000  
    
    - name: https 
      port: 8000 
      targetPort: 8000
  
--- 

apiVersion: apps/v1 
kind: Deployment 
metadata:
  name: store-application-service
  namespace: store-namespace 
  labels: 
    app: store-application-service

spec:
  selector:
    matchLabels:  
      app: store-entrypoint
  template:
    metadata:
      labels: 
        app: store-entrypoint 
    spec:
      containers:
        - name: store_application 
          image: crazycoderrr/store_service 
          envFrom:
            secretRef:
              - name: project-secret-store 
          ports:
            - targetPort: 8000 
              protocol: TCP 
              port: 8000  

          imagePullPolicy: Always

          # Variables that will determine right server credentials,
          # in order to make a healthcheck with right ip and port credentials.
          env:
            - name: APPLICATION_IP_ADDRESS 
              value: metadata.nodeIp

            - name: APPLICATION_PORT
              value: spec.template.spec.containers.ports[0].port

          livenessProbe:
            exec:
              command: ["curl", "-f", "http://$(APPLICATION_IP_ADDRESS):$(APPLICATION_PORT)"]
              startPeriod: 30s 
              initialSeconds: 10          
--- 

apiVersion: v1 
kind: Secret 
metadata:
  name: project-secret-store
  namespace: store-namespace 
type: Opaque 
stringData:
  # POSTGRESQL CONFIGURATION.
  DATABASE_HOST: "postgres" 
  DATABASE_PORT: "5435" 
  DATABASE_USER: "postgres_user" 
  DATABASE_PASSWORD: "postgres_password" 

  # Grpc Server Configuration 

  GRPC_SERVER_HOST: "localhost"
  GRPC_SERVER_PORT: "60000"

  # FIREBASE REAL TIME DATABASE CONFIGURATION.
  FIREBASE_PROJECT_ID: "id" 
  FIREBASE_SERVICE_ACCOUNT_ID: "id"
  FIREBASE_DATABASE_NAME: "orders_db"

  # Payment Service Credentials
  PAYMENT_SERVICE_HOST: "payment-service" # Host of the Service that is references `Payment Service from another namespace`
  PAYMENT_SERVICE_PORT: payment-service.spec.ports[0].port # Port of the Service that is references `Payment Service from another namespace`

  PAYMENT_GRPC_SERVER_HOST: "payment-service" 
  PAYMENG_GRPC_SERVER_PORT: "50000" 

  # Email Service Credentials
  EMAIL_SERVICE_HOST: "email-service"  # Host of the Service that is references `Email Service from another namespace`
  EMAIL_SERVICE_PORT: email-service.spec.ports[0].port # Port of the service that is referencing `Email Service from another namespace`

  EMAIL_GRPC_SERVER_HOST: "email-service" 
  EMAIL_GRPC_SERVER_PORT: "50000" 

