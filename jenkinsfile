// Pipeline that Builds / Tests / Deploys the new Version of the Image.

pipeline{

    agent any 
    environment {
        DOCKERHUB_CREDENTIALS=credentials("DockerHub") // Set Up Credentials at your Jenkins Server with Id :` DockerHub` and Your  Dockerhub Credentials
    }
    stages {

            stage("build"){

                steps{
                    sh "echo 'Running Build Pipeline...'"
                    sh "docker build -t new_versioned_image ."
                    sleep 10 
                    sh "echo 'Docker Built Image Successfully! Running Container....'"
                    sh "docker run new_versioned_image -p 8000:8000 --name new_versioned_container"
                }
            }

            stage("test"){

                steps{
                    load "./version_env.groovy"

                    sh "echo 'Running Test Pipeline'"
                    sh "echo 'Running Healtcheck Test...'"
                    sh "Sleeping until the Application will be fully ready..."
                    sleep 10    

                    script {
                        final String url = "http://${env.APPLICATION_HOST}:${APPLICATION_PORT}"
                        final def (String response, int code) =
                        sh(script: "curl -X GET -f $url", returnStdout: true).trim().tokenize("\n")
                                        
                        if (code == 200) {sh "echo Application health State Is Okay... Running Deployment Stage.."}else{
                            echo "Application Responded with Failure, Not Ready for Production..."
                            error "Health Check Stage Failure."
                        }
                    } 
                }
                post {
                    always {
                        sh "echo 'Removing Docker Container After Testing Stage...'"
                        sh "docker rm new_versioned_container"
                        sh "echo 'Container Has been Removed Successfully'"
                    }
                }
            }
       
            stage("deployment"){

                steps {
                    load "./version_env.groovy"
            
                    sh "echo 'Running Deployment Pipeline Stage...'"
                    sh "echo 'Tagging new Image Version'"

                    withCredentials([usernamePassword(
                        credentialsId: "DockerHub", // Credential Id that should be created at Jenkins Server...
                        usernameVariable: env.DOCKERHUB_CREDENTIALS_USR, // Credential Username that should be created at jenkins Server.
                        passwordVariable: env.DOCKERHUB_CREDENTIALS_PSW, // Credential Password that shoud be created at Jenkins Server..
                    )]){
                        sh "docker login -u ${env.DOCKERHUB_USERNAME} -p ${env.DOCKERHUB_PASSWORD}"
                        sh "Logged In.. Into Docker."

                        sh "echo 'Tagging An Image'"
                        sh "docker tag new_versioned_image ${env.DOCKERHUB_REPOSITORY_LINK}:latest"
                        sh "echo 'Tagged... Pushing onto docker repo.'"

                        sh "docker push ${env.DOCKERHUB_REPOSITORY_LINK}:latest"

                        sh "echo 'Tagged Successfully.. Pushing Image On Docker Hub..'"
                        sh "echo 'Image has been Pushed Successfully! Pipeline Finished.'"
                    }
                }
                
                post {
                    always { 
                        sh "docker rm -image new_versioned_image" // Removing Image in order to not to store it in the Agent..
                        sh "Logging Out From Dockerhub..."
                        sh "docker logout"
                    }
                }
            }
        }
    }