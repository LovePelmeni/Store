// Google Cloud Continious Delivery Pipeline..

def checkKubernetesManifestUpdated (containerName, namespace) {
    // Logic of checking for any cluster updates...
    final def (String kubernetesCtlResponse) = 
    sh (script: "kubectl get pods --namespace=$namespace --container=$containerName",
    returnStdout: true).trim()  // returns all pods related to deployment namespace 
    if (kubernetesCtlResponse == "No resource has been found.") {sh "Still"; return false}else{
        return true 
    }
}


pipeline {

    agent { dockerfile true }
    load "./deployment.groovy"  // file for storing current Version Deployment Variables...
    load "./gke_credentials.groovy" // fire responsible for storing GKE Credentials...
 
    stages {

        stage("build") {
            steps{
                sh "docker build ${DOCKER_FILE_PATH} --name new_versioned_image"
                sh "echo 'Image has beenImage has been built successfully.. Running Testing Stage'"
            }
        }

        stage("test"){
            steps{
                // checking for application health..
                load "./version_env.groovy"

                sh "echo 'Running Test Pipeline'"
                sh "echo 'Running Healtcheck Test...'"

                sh "Sleeping until the Application will be fully ready..."
                sleep 10    

                script {
                    final String url = "http://${env.APPLICATION_HOST}:${APPLICATION_PORT}"
                    final def (String response, int code) =
                    sh(script: "curl -X GET -f $url", returnStdout: true).trim().tokenize("\n")
        
                    if (code == 200) {sh "echo Application health State Is Okay... Running Deployment Stage.."}else{
                        echo "Application Responded with Failure, Not Ready for Production..."
                        error "Health Check Stage Failure."
                    }
                }
            }
        }

        stage("docker-deployment") {
            steps{
            sh "echo 'Running `Docker-Deployment` Stage.'"
            sh "echo 'docker tag new_versioned_image ${env.DOCKERHUB_REPOSITORY_NAME}:latest'"
            sh "echo 'docker push ${env.DOCKERHUB_REPOSITORY_NAME}:latest'"
            sh "echo 'Image has been pushed to Docker hub registry, Deploying Into Google Cloud Kubernetes Engine'"
            sh "echo 'Removing Local Image, In order to free the space for new potential versions..'"
            sh "echo 'docker image rm ${env.DOCKER_IMAGE_DESIRED_NAME}:latest'"
            sh "echo '`Docker-Deployment` stage passed.. Going to `GCP-Build` Stage...'"
            }
        }

        stage("gcp-bulding-manifests-stage") {
            steps{
                sh "echo 'Running `GCP-Build` Stage...'"
                sh "echo 'gcloud build submit --file=${env.DEPLOYMENT_FILE_LINK}'"
                sh "echo 'gcloud build submit --file=${env.DEPLOYMENT_FILE_LINK} --no-source'"
                sh "echo 'Google Cloud Built the manifests... Deploying into cluster."
            }
        }

        stage("gke-deployment") {
            steps{
                sh "echo 'Deploying New Version Manifest Into Kubernetes Cluster...'"
                step([
                    $class: "KubernetesEngineBuilder",
                    clusterName: env.CLUSTER_NAME,
                    location: env.LOCATION, 
                    projectId: env.PROJECT_ID,
                    credentialsId: env.CREDENTIALS_ID,
                    verifyDeployments: true, 
                    manifestPattern: env.DEPLOYMENT_MANIFEST_LINK,
                ])
                sh "echo 'Checking for Updates inside the Cluster...'"
                sleep 10 // waiting some time in order to let cluster apply new changes..
                if checkKubernetesManifestUpdated() != true {sh "echo 'No Any Updates to the Cluster Yet'"}else{
                sh "echo 'New Version were successfully deployed into cluster'"}
            }
        }   
    }
}