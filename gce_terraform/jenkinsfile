// Pipeline for Applied Terraform Configuration in the Google Cloud Platform Project.
pipeline {
    agent any 
    environment {
        REMOTE_GITHUB_TERRAFORM_STATE_STORE="https://github.com/LovePelmeni/Terraform-Config-Store.git"
    }
    
    stages {
        stage("terraform-validating-configuration") {
            script {
                Valid = (sh script: "terraform validate", returnStdout: true).Split(" ")
                if (Valid[0] != "Success!") {
                echo "File has some Validation Errors."
                error "Invalid File."}else{echo "Terraform File Is Valid. Deploying..."}
            }
        }
        stage("terraform-planning-configuration"){
            script {
                TerraformLogPlan = (sh script: "terraform plan", returnStdout: true) 
                sh "echo 'Plan has been grabbed."
                echo "Terraform Plan: $TerraformLogPlan"
                echo "Applying new Configuration."
            }
        }
        stage("terraform-applying-new-configuration") {
            
            steps {
                script {
                    sh "echo 'Applying Terraform Configuration...'"
                    Applied = sh script: "terraform apply -auto-approve --no-color", returnStdout: true
                    if (Applied != "Applied!") {
                        error "Failed To Apply Terraform Pipeline, Response: $Applied"
                    }else{
                        sh "Terraform Pipeline has been execut"
                    }
                }
            }
        }
        post {
            emailtext body: "Terraform Pipeline Has been Finished. Please Review The Results.",
            recipientProviders: [[$class: "DevelopersRecipientProvider"], [$class: "RequesterRecipientProvider"]],
            subject: "Google Cloud Terraform Pipeline."
        }
        stage("saving-terraform-updated-configuration"){
            // logic of pushing new state file into backup repo....
            sh "echo 'Initializing Backup Store Repo...."
            sh "git remote set-url origin ${env.REMOTE_GITHUB_TERRAFORM_STATE_STORE}" 
            sh "git checkout main"
            sh "git add terraform/terraform-setup.tf" 
            sh "git commit -m 'New Terraform State Version ${env.StateVersion}'" 
            sh "git push -u origin main" 

            post {
                sh "rolling back to main repo.." 
                sh "git remote set-url origin https://github.com/LovePelmeni/Store.git" 
            }
        }
    }
}


