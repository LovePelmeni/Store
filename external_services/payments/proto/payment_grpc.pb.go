// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: payment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentIntentClient is the client API for PaymentIntent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentIntentClient interface {
	CreatePaymentIntent(ctx context.Context, in *PaymentIntentParams, opts ...grpc.CallOption) (*PaymentIntentResponse, error)
}

type paymentIntentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentIntentClient(cc grpc.ClientConnInterface) PaymentIntentClient {
	return &paymentIntentClient{cc}
}

func (c *paymentIntentClient) CreatePaymentIntent(ctx context.Context, in *PaymentIntentParams, opts ...grpc.CallOption) (*PaymentIntentResponse, error) {
	out := new(PaymentIntentResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentIntent/CreatePaymentIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentIntentServer is the server API for PaymentIntent service.
// All implementations must embed UnimplementedPaymentIntentServer
// for forward compatibility
type PaymentIntentServer interface {
	CreatePaymentIntent(context.Context, *PaymentIntentParams) (*PaymentIntentResponse, error)
	mustEmbedUnimplementedPaymentIntentServer()
}

// UnimplementedPaymentIntentServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentIntentServer struct {
}

func (UnimplementedPaymentIntentServer) CreatePaymentIntent(context.Context, *PaymentIntentParams) (*PaymentIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentIntent not implemented")
}
func (UnimplementedPaymentIntentServer) mustEmbedUnimplementedPaymentIntentServer() {}

// UnsafePaymentIntentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentIntentServer will
// result in compilation errors.
type UnsafePaymentIntentServer interface {
	mustEmbedUnimplementedPaymentIntentServer()
}

func RegisterPaymentIntentServer(s grpc.ServiceRegistrar, srv PaymentIntentServer) {
	s.RegisterService(&PaymentIntent_ServiceDesc, srv)
}

func _PaymentIntent_CreatePaymentIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIntentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntentServer).CreatePaymentIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentIntent/CreatePaymentIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntentServer).CreatePaymentIntent(ctx, req.(*PaymentIntentParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentIntent_ServiceDesc is the grpc.ServiceDesc for PaymentIntent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentIntent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentIntent",
	HandlerType: (*PaymentIntentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentIntent",
			Handler:    _PaymentIntent_CreatePaymentIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

// PaymentSessionClient is the client API for PaymentSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentSessionClient interface {
	CreatePaymentSession(ctx context.Context, in *PaymentSessionParams, opts ...grpc.CallOption) (*PaymentSessionResponse, error)
}

type paymentSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentSessionClient(cc grpc.ClientConnInterface) PaymentSessionClient {
	return &paymentSessionClient{cc}
}

func (c *paymentSessionClient) CreatePaymentSession(ctx context.Context, in *PaymentSessionParams, opts ...grpc.CallOption) (*PaymentSessionResponse, error) {
	out := new(PaymentSessionResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentSession/CreatePaymentSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentSessionServer is the server API for PaymentSession service.
// All implementations must embed UnimplementedPaymentSessionServer
// for forward compatibility
type PaymentSessionServer interface {
	CreatePaymentSession(context.Context, *PaymentSessionParams) (*PaymentSessionResponse, error)
	mustEmbedUnimplementedPaymentSessionServer()
}

// UnimplementedPaymentSessionServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentSessionServer struct {
}

func (UnimplementedPaymentSessionServer) CreatePaymentSession(context.Context, *PaymentSessionParams) (*PaymentSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentSession not implemented")
}
func (UnimplementedPaymentSessionServer) mustEmbedUnimplementedPaymentSessionServer() {}

// UnsafePaymentSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentSessionServer will
// result in compilation errors.
type UnsafePaymentSessionServer interface {
	mustEmbedUnimplementedPaymentSessionServer()
}

func RegisterPaymentSessionServer(s grpc.ServiceRegistrar, srv PaymentSessionServer) {
	s.RegisterService(&PaymentSession_ServiceDesc, srv)
}

func _PaymentSession_CreatePaymentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSessionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentSessionServer).CreatePaymentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentSession/CreatePaymentSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentSessionServer).CreatePaymentSession(ctx, req.(*PaymentSessionParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentSession_ServiceDesc is the grpc.ServiceDesc for PaymentSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentSession",
	HandlerType: (*PaymentSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentSession",
			Handler:    _PaymentSession_CreatePaymentSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

// RefundClient is the client API for Refund service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefundClient interface {
	CreateRefund(ctx context.Context, in *RefundParams, opts ...grpc.CallOption) (*RefundResponse, error)
}

type refundClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundClient(cc grpc.ClientConnInterface) RefundClient {
	return &refundClient{cc}
}

func (c *refundClient) CreateRefund(ctx context.Context, in *RefundParams, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, "/payments.Refund/CreateRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundServer is the server API for Refund service.
// All implementations must embed UnimplementedRefundServer
// for forward compatibility
type RefundServer interface {
	CreateRefund(context.Context, *RefundParams) (*RefundResponse, error)
	mustEmbedUnimplementedRefundServer()
}

// UnimplementedRefundServer must be embedded to have forward compatible implementations.
type UnimplementedRefundServer struct {
}

func (UnimplementedRefundServer) CreateRefund(context.Context, *RefundParams) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedRefundServer) mustEmbedUnimplementedRefundServer() {}

// UnsafeRefundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundServer will
// result in compilation errors.
type UnsafeRefundServer interface {
	mustEmbedUnimplementedRefundServer()
}

func RegisterRefundServer(s grpc.ServiceRegistrar, srv RefundServer) {
	s.RegisterService(&Refund_ServiceDesc, srv)
}

func _Refund_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.Refund/CreateRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServer).CreateRefund(ctx, req.(*RefundParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Refund_ServiceDesc is the grpc.ServiceDesc for Refund service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Refund_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.Refund",
	HandlerType: (*RefundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRefund",
			Handler:    _Refund_CreateRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
